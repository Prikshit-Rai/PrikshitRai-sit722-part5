# 
# GitHub Actions workflow.
#
# Automatically deploys the python microservice to Kubernetes on push to any branch. 
# For real use you might want to restrict this to the "prod" branch.
#

name: Terraform integration

on:
  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 
  
jobs:

  deploy:
    runs-on: ubuntu-latest

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      # Azure login using Service Principal credentials from GitHub Secrets
      # Previously : az ad sp create-for-rbac --name "Deakin labs DS - 1216" --role Owner --scopes /subscriptions/1af860c3-e4f4-4c2c-9b63-46be27b4406b
      # creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure Login
        # uses: azure/login@v1
        # with:
        #   creds: ${{ secrets.AZURE_CREDENTIALS }}
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      # Run az cli commands
      - name: List Azure Resource Groups
        run: az group list

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: scripts/terraform

      # Run Terraform plan
      - name: Terraform Plan
        run: terraform plan
        working-directory: scripts/terraform
        continue-on-error: true

      # Optionally, apply Terraform changes (use cautiously in production!)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        working-directory: scripts/terraform
        continue-on-error: true
      
      # Upload Terraform state file to GIT
      - name: Upload Terraform state file
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state-file
          path: ./scripts/terraform/terraform.tfstate

      # Install required dependencies
      - name: Install dependencies
        run: |
          sudo apt install gh -y
          sudo apt install jq -y

      # Login to GitHub-CLI using token
      - name: GitHub-Cli login
        run: |
          echo "${{ secrets.TOKEN }}" | gh auth login --with-token

      # Refresh terraform state
      - name: Refresh terraform state
        run: terraform refresh

      # Set Container registry, registry username, password, and kubernetes config
- name: Set Secrets
  run: |
    # Retrieve the first ACR name in the list
    azure_container_registry_name=$(az acr list --query "[0].name" -o tsv)
    
    # If there is no ACR listed, throw an error
    if [ -z "$azure_container_registry_name" ]; then
      echo "No Azure Container Registry found!"
      exit 1
    fi

    # Set the container registry secret
    gh secret set CONTAINER_REGISTRY --body "$azure_container_registry_name.azurecr.io"

    # Retrieve ACR credentials
    acr_credentials=$(az acr credential show --name "$azure_container_registry_name" --query "{username:username, password:passwords[0].value}" --output json)
    
    # Extract username and password and set GitHub secrets
    acr_username=$(echo "$acr_credentials" | jq -r '.username')
    acr_password=$(echo "$acr_credentials" | jq -r '.password')
    gh secret set REGISTRY_UN --body "$acr_username"
    gh secret set REGISTRY_PW --body "$acr_password"

    # Get Kubernetes credentials and set kube config secret
    az aks get-credentials --resource-group ${{ vars.AZURE_RESOURCE_NAME }} --name ${{ vars.APP_NAME }} --overwrite-existing
    gh secret set KUBE_CONFIG --body "$(cat ~/.kube/config | base64 -w 0)"

